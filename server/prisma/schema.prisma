generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(255)
  email        String    @unique @db.VarChar(255)
  password     String    @db.VarChar(255)
  usdtWallet   String    @unique @db.VarChar(255)
  isAdmin      Boolean   @default(false)
  gamesPlayed  Int       @default(0)
  gamesWon     Int       @default(0)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)
  
  // Relaciones
  scores       Score[]
  payments     Payment[]
  tournaments  TournamentRegistration[]
  
  @@map("users")
  @@index([isAdmin])
  @@index([createdAt])
}

model Tournament {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  description     String?   @db.Text
  maxPlayers      Int?
  maxAmount       Decimal?  @db.Decimal(10, 2)
  currentAmount   Decimal   @default(0) @db.Decimal(10, 2)
  registrationFee Decimal   @default(10) @db.Decimal(10, 2)
  prizePercentage Decimal   @default(70) @db.Decimal(5, 2)
  startDate       DateTime? @db.Timestamp(6)
  endDate         DateTime? @db.Timestamp(6)
  duration        Int?      // minutos
  isActive        Boolean   @default(true)
  hiddenFinalized Boolean   @default(false)
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @updatedAt @db.Timestamp(6)
  
  // Relaciones
  registrations   TournamentRegistration[]
  payments        Payment[]
  scores          Score[]
  
  @@map("tournaments")
  @@index([isActive])
  @@index([startDate])
  @@index([isActive, startDate])
  @@index([maxAmount])
  @@index([createdAt])
}

model TournamentRegistration {
  id            Int       @id @default(autoincrement())
  userId        Int
  tournamentId  Int
  registeredAt  DateTime  @default(now()) @db.Timestamp(6)
  
  // Relaciones
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tournamentId])
  @@map("tournament_registrations")
  @@index([userId])
  @@index([tournamentId])
  @@index([userId, tournamentId])
  @@index([registeredAt])
}

model Payment {
  id            Int       @id @default(autoincrement())
  userId        Int
  tournamentId  Int
  txHash        String    @db.VarChar(255)
  amount        Decimal   @db.Decimal(10, 2)
  isActive      Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  
  // Relaciones
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  @@map("payments")
  @@index([userId])
  @@index([tournamentId])
  @@index([isActive])
  @@index([createdAt])
  @@index([txHash])
}

model Score {
  id            Int       @id @default(autoincrement())
  userId        Int
  tournamentId  Int?
  value         Int
  mode          String    @db.VarChar(50)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)

  // Relaciones
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament    Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("scores")
  @@index([userId])
  @@index([tournamentId])
  @@index([value])
  @@index([createdAt])
}

model UserSubscription {
  telegramUserId   BigInt    @id
  subscribed       Boolean   @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  lastNotification DateTime? @db.Timestamp(6)

  @@map("user_subscriptions")
}