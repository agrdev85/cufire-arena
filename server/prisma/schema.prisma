generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  password     String
  usdtWallet   String   @unique
  isAdmin      Boolean  @default(false)
  gamesPlayed  Int      @default(0)
  gamesWon     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  scores       Score[]
  payments     Payment[]
  tournaments  TournamentRegistration[]
  
  @@map("users")
}

model Tournament {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  maxPlayers      Int?
  maxAmount       Float?
  currentAmount   Float     @default(0)
  registrationFee Float     @default(10)
  prizePercentage Float     @default(70)  // Percentage of maxAmount to distribute
  startDate       DateTime?
  endDate         DateTime?
  duration        Int?      // minutos
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  registrations   TournamentRegistration[]
  payments        Payment[]
  scores          Score[]
  
  @@map("tournaments")
}

model TournamentRegistration {
  id            Int @id @default(autoincrement())
  userId        Int
  tournamentId  Int
  registeredAt  DateTime @default(now())
  
  // Relations
  user          User       @relation(fields: [userId], references: [id])
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  
  @@unique([userId, tournamentId])
  @@map("tournament_registrations")
}

model Payment {
  id            Int @id @default(autoincrement())
  userId        Int
  tournamentId  Int
  txHash        String
  amount        Float
  isActive      Boolean @default(false) // false=pending, true=verified
  createdAt     DateTime @default(now())
  
  // Relations
  user          User       @relation(fields: [userId], references: [id])
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  
  @@map("payments")
}

model Score {
  id            Int @id @default(autoincrement())
  userId        Int
  tournamentId  Int?
  value         Int
  mode          String
  createdAt     DateTime @default(now())
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  
  @@map("scores")
}